using FluentValidation.AspNetCore;
using MediatR;
using MediatRFluentDemo.Context;
using MediatRFluentDemo.PipelineBehaviours;
using MediatRFluentDemo.Settings;
using Microsoft.AspNetCore.Localization;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using System.Globalization;
using System.Reflection;

#region Service
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

#region DbContext
builder.Services.AddDbContext<ApplicationContext>(
               opt =>
               {
                   opt.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
                   opt.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
               });
builder.Services.AddScoped<IApplicationContext>(provider => provider.GetService<ApplicationContext>());
#endregion

#region Swagger
builder.Services.AddSwaggerGen(setupAction =>
{
    // v1 --> name that will be part of the URI where the OpenAPi specification can be found
    setupAction.SwaggerDoc("DevBGDemo",
        // we can set properties related to additional information
        new OpenApiInfo()
        {
            Version = "v1",
            Title = "MediatRFluentValidationDemo API",
            Description = "some description of the API",
            Contact = new OpenApiContact
            {
                Email = "someemail@emal.com",
                Name = "Devbg",
                Url = new Uri("https://dev.bg/"),
                // Extensions --> can contains logos, headers etc.
            },
            License = new OpenApiLicense
            {
                Name = "MIT License",
                Url = new Uri("https://opensource.org/licenses/MIT")
            }
        });

    // reads the xml specified in our Project --> Properties --> Build --> Output --> Xml documentation path
    var xmlCommentsFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlCommentsFullPath = Path.Combine(AppContext.BaseDirectory, xmlCommentsFile);

    setupAction.IncludeXmlComments(xmlCommentsFullPath);
});
#endregion

#region MediatR
builder.Services.AddDistributedMemoryCache();
builder.Services.AddMediatR(Assembly.GetExecutingAssembly());
builder.Services.Configure<CacheSettings>(builder.Configuration.GetSection("CacheSettings"));
builder.Services.AddTransient(typeof(IPipelineBehavior<,>), typeof(CachingBehavior<,>));
builder.Services.AddTransient(typeof(IPipelineBehavior<,>), typeof(LoggingBehaviour<,>));
#endregion

#region FluentValidaiton
builder.Services.AddControllers()
     .AddFluentValidation(s =>
     {
         s.RegisterValidatorsFromAssemblyContaining<Program>(); // register all validators from assembly.
         s.DisableDataAnnotationsValidation = true; // use fluent validation instead of Data annotations.
     });

builder.Services.AddLocalization(opt => opt.ResourcesPath = "Resources"); // [FLUENT VALDIATION DEMO] - where to llok for resource files
#endregion

#endregion

#region Middlewares
var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(setupAction =>
        {
            setupAction.DisplayRequestDuration(); // display duration of the request
            setupAction.SwaggerEndpoint("/swagger/DevBGDemo/swagger.json", "demo API"); // endpoint where swagger UI can find our specification generated by swaggerGen
            setupAction.DefaultModelExpandDepth(2); // expand model in UI
            setupAction.DefaultModelRendering(Swashbuckle.AspNetCore.SwaggerUI.ModelRendering.Model); // default seeing Model or example
            setupAction.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.DocExpansion.None); // default is list
        });
}

app.UseRequestLocalization(GetLocalizationOptions());
app.UseStaticFiles();
app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
#endregion

static RequestLocalizationOptions GetLocalizationOptions()
{
    var supportedCultures = new List<CultureInfo>
    {
        new CultureInfo("fr-FR"),
        new CultureInfo("en-GB"),
        new CultureInfo("bg-BG")
    };

    var options = new RequestLocalizationOptions
    {
        DefaultRequestCulture = new RequestCulture("bg-BG"),
        SupportedCultures = supportedCultures,
        SupportedUICultures = supportedCultures
    };

    return options;
}